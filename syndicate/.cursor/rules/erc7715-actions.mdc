---
description: 
globs: 
alwaysApply: true
---
[ERC-7710](mdc:7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/https:/eip.tools/eip/7710) introduces a standard way for smart contract accounts to delegate capabilities to other
smart contract accounts or externally owned accounts (EOAs).

:::caution Experimental
This experimental feature requires MetaMask Delegation Toolkit version 0.7.0 or later and may change in future releases.
:::

The Delegation Toolkit introduces two experimental functions, `erc7710BundlerActions()` and `erc7710WalletActions()`, that let
a caller redeem delegations granted by MetaMask's permissions system (in development).

## Extract the `permissionsContext`, `delegationManager`, and `accountMetadata`

Refer to [ERC-7715 permissions](mdc:7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/erc-7715.md) for information on how to request user permissions.
Once the permission has been granted, extract the relevant data from the response.
For example:

```typescript
// Response received from the ERC-7715 wallet_grantPermissions request.
const permissionsResponse = [{
  chainId: "0x7b27",
  expiry: 1234567890,
  permissions: [{
    type: "native-token-stream",
    data: {
      amountPerSecond: "0x1",
      maxAmount: "0x2",
      initialAmount: undefined,
      startTime: 2,
    },
    permissionsContext: "0x1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e4f5a6b7c8d9e0f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e4f5a6b7c8d9e0f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e4f5a6b7c8d9e0f1a2b3c4d"
  }],
  signer: {
    type: "account",
  230D5BD2544059816D88A895BB000Abe00"
    }
  },
  context: "0x123456",
  signerMeta: {
    delegationManager: "0xDC7e12b41E5e61BfCc7F56AAFB7B93288F61e841"
  },
  accountMetadata: [{
    factory: "0x65E726b404149fE37F4b291c81Dc6eddd44763A7",
    factoryData: "0x1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e4f5a6b7c8d9e0f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e4f5a6b7c8d9e0f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e4f5a6b7c8d9e0f1a2b"
  }]
}];

const { accountMeta, context, signerMeta } = permissionsResponse[0];
const { delegationManager } = signerMeta;

```

This data encodes the authority that lets the delegate redeem the permission.

## Redeem the permission

Redeem a delegation using one of two methods. Choose the method based on your account type:

- If redeeming with a smart contract account, call `sendUserOperationWithDelegation`.
- If redeeming with an EOA, call `sendTransactionWithDelegation`.

### Redeem with a smart contract account

To redeem a delegation with a smart contract account, create a `MetaMaskSmartAccount` and a `BundlerClient`.
Refer to the [`MetaMaskSmartAccount` documentation](mdc:7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/how-to/create-delegator-account/#create-a-metamasksmartaccount) and the
[Viem docs on how to create a Bundler Client](mdc:7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/https:/viem.sh/account-abstraction/clients/bundler).

After setting up your `BundlerClient`, extend it with `erc7710BundlerActions`, and then call `sendUserOperationWithDelegation`.
For example:

```typescript
import { toMetaMaskSmartAccount } from "@metamask/delegation-toolkit";
import { erc7710BundlerActions } from "@metamask/delegation-toolkit/experimental";
import { http, createBundlerClient, createPublicClient, parseEther } from "viem";
import { privateKeyToAccount } from "viem/accounts";
import { lineaSepolia as chain } from "viem/chains";

import {
  Implementation,
  toMetaMaskSmartAccount,
} from "@metamask/delegation-toolkit";

const transport = http();
const publicClient = createClient({ transport, chain });

const privateKey = "0x..."; // The private key of the signer.
const owner = privateKeyToAccount(privateKey);

const deploySalt = "0x";

const account = await toMetaMaskSmartAccount({
  client: publicClient,
  implementation: Implementation.Hybrid,
  deployParams: [owner.address, [], [], []],
  deploySalt,
  signatory: { account: owner },
});

const bundlerClient = createBundlerClient({
  account,
  ...
  })
  .extend(erc7710BundlerActions());

const publicClient = createPublicClient({
  chain,
  transport: http()
});

// These properties must be extracted from the permission response.

const { accountMeta, context, signerMeta } = permissionsResponse[0];
const { delegationManager } = signerMeta;

// `calls` may be an array, and may mix calls with and without a `permissionsContext` (and `delegationManager`).
// Calls without a `permissionsContext` will be executed as normal.

bundlerClient.sendUserOperationWithDelegation({
  publicClient,
  calls: [{
    to: "0x70997970c51812dc3a010c7d01b50e0d17dc79c8",
    value: parseEther("1"),
    permissionsContext,
    delegationManager
  }],
  accountMetadata,
  // appropriate values must be used for fee-per-gas
  maxFeePerGas: 1n,
  maxPriorityFeePerGas: 1n
});
```

:::note
`sendUserOperationWithDelegation` is similar to the `sendUserOperation` function, but does not accept `callData` directly.
:::

### Redeem with an EOA

To redeem a delegation with an EOA, [create a Viem Wallet Client](mdc:7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/7715-starter/https:/viem.sh/docs/clients/wallet).

After creating your `WalletClient`, extend it with `erc7710WalletActions`.
For example:

```typescript
import { erc7710WalletActions } from "@metamask/delegation-toolkit/experimental";
import { http, createWalletClient, parseEther } from "viem";
import { privateKeyToAccount, generatePrivateKey } from "viem/accounts";
import { lineaSepolia as chain } from "viem/chains";

const privateKey = "0x..."; // The private key of the signer.
const owner = privateKeyToAccount(privateKey);

const transport = http();

const walletClient = createWalletClient({
  account,
  transport,
  chain,
}).extend(erc7710WalletActions());

// These properties must be extracted from the permission response.
const permissionsContext = permissionsResponse[0].permissions[0].permissionsContext;
const delegationManager = permissionsResponse[0].signerMeta.delegationManager;
const accountMetadata = permissionsResponse[0].accountMetadata;

if (accountMetadata?.length !== 0) {
  // If the granted permission contains accountMetadata, this must be executed before attempting to 
  // redeem the delegation.
}

walletClient.sendTransaction({
  chain,
  to: "0x70997970c51812dc3a010c7d01b50e0d17dc79c8",
  value: parseEther("1"),
  permissionsContext,
  delegationManager
});
```
